name: Rust

on:
  push:
    branches: [main]
  pull_request:

env:
  RUSTFLAGS: -Dwarnings -Dclippy::all -Dclippy::pedantic

jobs:

  complete:
    if: always()
    needs: [generate, fmt, build, test, publish-dry-run]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  generate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - run: rustup update
    - run: make clean generate
    - shell: 'script --return --quiet --command "bash {0}"'
      run: git diff --exit-code || (echo "Generated Rust code is out-of-date with the XDR .x files.\nRegenerate and test them by running 'make clean generate build test'." && exit 1)

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  commands:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup update
    - run: cargo install --git https://github.com/taiki-e/cargo-hack --rev 042bb37456e7e024428854c405974a0ff2067622 cargo-hack
    - id: commands
      run: |
        echo "build=$( \
          cargo hack --print-command-list clippy --feature-powerset --all-targets \
          | sort \
          | jq -R -s -c 'split("\n") | _nwise(20) | join("\n")' \
          | jq -s -c \
        )" >> $GITHUB_OUTPUT
        echo "test=$( \
          cargo hack --print-command-list test --feature-powerset --all-targets \
          | sort \
          | jq -R -s -c 'split("\n") | _nwise(20) | join("\n")' \
          | jq -s -c \
        )" >> $GITHUB_OUTPUT
    outputs:
      build: ${{ steps.commands.outputs.build }}
      test: ${{ steps.commands.outputs.test }}

  build-and-test:
    needs: build-commands
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
          test: false
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          test: true
        # TODO: Address GitHub Actions concurrency limits and re-enable.
        # - os: macos-latest
        #   target: x86_64-apple-darwin
        # - os: macos-latest
        #   target: aarch64-apple-darwin
        # TODO: Address disk space usage problems and re-enable.
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
        commands:
          build: ${{ fromJSON(needs.build-commands.outputs.commands) }}
          test: ${{ fromJSON(needs.build-commands.outputs.commands) }}
    runs-on: ${{ matrix.sys.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup update
    - run: rustup target add ${{ matrix.sys.target }}
    - uses: stellar/binaries@v12
      with:
        name: cargo-hack
        version: 0.5.16
    - name: Build
      run: echo "${{ matrix.commands.build }}" | xargs -I{} bash -x -c '{} --target ${{ matrix.sys.target }}'
    - name: Test
      if: matrix.sys.test
      run: echo "${{ matrix.commands.test }}" | xargs -I{} bash -x -c '{} --target ${{ matrix.sys.target }}'

  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
    uses: stellar/actions/.github/workflows/rust-publish-dry-run.yml@main
    with:
      runs-on: ${{ matrix.sys.os }}
      target: ${{ matrix.sys.target }}
      cargo-hack-feature-options: --feature-powerset --exclude-features default --group-features base64,serde,arbitrary,hex
